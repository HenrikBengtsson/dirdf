% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dirdf.R
\name{dirdf}
\alias{dirdf}
\alias{dirdf2}
\title{List Files in a Directory as a Data Frame}
\usage{
dirdf(paths, template = NULL, regexp = NULL, colnames = NULL,
  missing = NA_character_, recursive = TRUE, ...)

dirdf2(paths, template = NULL, regexp = NULL, colnames = NULL,
  missing = NA_character_, recursive = TRUE, ...)
}
\arguments{
\item{paths}{character vector with zero or more paths that will be searched.}

\item{template}{\link[=templates]{template} character string, e.g.
\code{"Country/Province/City/StationID_Date.ext"}.}

\item{regexp}{regular expression used to parse the file names.
Only one of the arguments \code{regexp} and \code{template} must be specified, i.e.
only one of them can be non-\code{NULL}.}

\item{colnames}{character vector containing the names of the columns in the
data frame. Not required if using \code{template} or if \code{regexp} uses
named capturing groups (see examples), but may still be used to override
column names.}

\item{missing}{value to use for unmatched optional template elements or
regexp capturing groups.}

\item{recursive}{if \code{TRUE}, it will recursively search over directories}

\item{...}{Additional arguments pass to \code{\link[base:dir]{base::dir()}}.}
}
\description{
Creates a data frame using information from paths and file names.
It searches through the directories in order to create the path names of the files.
It accepts either a \link[=templates]{template} or a regular expression and column names.
}
\examples{
path1 <- system.file(package = "dirdf", "examples", "dataset_1")
template1 <- "Year-Month-Day_Assay_Plasmid-Type-Fraction_WellNumber?.extension"
files1 <- dirdf(path1, template = template1)
print(files1)

path2 <- system.file(package = "dirdf", "examples", "dataset_2")
template2 <- "Date_Assay_Experiment_WellNumber?.extension"
files2 <- dirdf(path2, template = template2)
print(files2)

}
\seealso{
\code{\link[=dirdf_parse]{dirdf_parse()}}
}
